{{^processor.inputStreams.empty}}
import {
{{#processor.jsonInputStreams}}
    {{{dataFormat.nameCamelUpper}}},
{{/processor.jsonInputStreams}}
} from '../streams';
import { IPExtractor } from "../iPExtractor";
import { Message, StoreType } from "dataspray-runner";
import { TestCoordinator } from "./testCoordinator";
{{#processor.inputStreams}}

export type Test{{{processor.nameCamelUpper}}}Process{{{uniqueNameCamelUpper}}} = (messageKey: string, {{{dataFormat.nameCamelLower}}}: {{{dataFormat.nameCamelUpper}}}, messageId?: string) => TestCoordinator;
export const prepareTest{{{processor.nameCamelUpper}}}Process{{{uniqueNameCamelUpper}}} = (processor: {{{processor.nameCamelUpper}}}): Test{{{processor.nameCamelUpper}}}Process{{{uniqueNameCamelUpper}}} => (messageKey, {{{dataFormat.nameCamelLower}}}, messageId = crypto.randomUUID()) => {
    const message: Message<{{{dataFormat.nameCamelUpper}}}> = new Message({
            storeType: StoreType.{{{storeType}}},
            storeName: '{{{storeName}}}',
            streamName: '{{{streamName}}}',
            key: messageKey,
            id: messageId,
        },
        {{{dataFormat.nameCamelLower}}},
    );
    const coordinator = new TestCoordinator({{#processor.hasDynamoState}}messageKey{{/processor.hasDynamoState}});
    processor.process{{{uniqueNameCamelUpper}}}(message, coordinator);
    return coordinator;
}
{{/processor.inputStreams}}
{{/processor.inputStreams.empty}}