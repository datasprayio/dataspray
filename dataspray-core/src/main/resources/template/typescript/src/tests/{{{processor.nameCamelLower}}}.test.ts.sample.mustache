import { Processor } from "../autogen/processor";
import { {{{processor.nameCamelUpper}}} } from "../{{{processor.nameCamelLower}}}";
{{#processor.web}}
import { mockRequest } from "./autogen/mockRequest";
import { TestCoordinator } from "./autogen/testCoordinator";
import {
    {{#processor.jsonInputStreams}}
    {{{dataFormat.nameCamelUpper}}},
    {{/processor.jsonInputStreams}}
} from '../autogen/streams';
{{/processor.web}}
{{^processor.inputStreams.empty}}
import {
    {{#processor.inputStreams}}
    Test{{{processor.nameCamelUpper}}}Stream{{{uniqueNameCamelUpper}}},
    prepareTest{{{processor.nameCamelUpper}}}Stream{{{uniqueNameCamelUpper}}},
    {{/processor.inputStreams}}
} from "./autogen/mockProcess";
{{/processor.inputStreams.empty}}
{{#processor.web}}

describe('Web endpoint handler', () => {
    let processor: Processor;

    beforeEach(() => {
        processor = new {{{processor.nameCamelUpper}}}();
    });
    {{#endpoints}}

    it('Web {{{nameCamelUpper}}}', async () => {
        const response = await processor.web{{{nameCamelUpper}}}(
            {{>../web-method-mock-values}}
            TestCoordinator.createForWeb(),
        );
        expect(response.statusCode).toBe(204);
    });
    {{/endpoints}}
    {{#endpoints.empty}}

    it('Web', async () => {
        const response = await processor.web(
            mockRequest({
                body: '{}',
            }),
            TestCoordinator.createForWeb(),
        );
        expect(response.statusCode).toBe(204);
    });
    {{/endpoints.empty}}
});
{{/processor.web}}
{{^processor.inputStreams.empty}}

describe('SQS message processors', () => {
    let processor: {{{processor.nameCamelUpper}}};
    {{#processor.inputStreams}}
    let stream{{{uniqueNameCamelUpper}}}: Test{{{processor.nameCamelUpper}}}Stream{{{uniqueNameCamelUpper}}};
    {{/processor.inputStreams}}

    beforeEach(() => {
        processor = new {{{processor.nameCamelUpper}}}();
        {{#processor.inputStreams}}
        stream{{{uniqueNameCamelUpper}}} = prepareTest{{{processor.nameCamelUpper}}}Stream{{{uniqueNameCamelUpper}}}(processor);
        {{/processor.inputStreams}}
    });
    {{#processor.inputStreams}}

    it('Stream {{{uniqueNameCamelUpper}}}', async () => {
        stream{{{uniqueNameCamelUpper}}}(
            'messageKey',
            {{>stream-test-data}},
            'messageId',
        ){{#processor.outputStreams}}
            .assertSentNone{{{dataFormat.nameCamelUpper}}}(){{/processor.outputStreams}};
    });
    {{/processor.inputStreams}}
});
{{/processor.inputStreams.empty}}
