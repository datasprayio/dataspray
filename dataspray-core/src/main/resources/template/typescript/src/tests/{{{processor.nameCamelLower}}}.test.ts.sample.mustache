import { Processor } from "../processor";
import { {{{processor.nameCamelUpper}}} } from "../{{{processor.nameCamelLower}}}";
{{#processor.endpoint}}
import { mockRequest } from "./mockRequest";
{{/processor.endpoint}}
{{^processor.inputStreams.empty}}
import { Coordinator } from "../coordinator";
import {
    {{#processor.inputStreams}}
    Test{{{processor.nameCamelUpper}}}Process{{{uniqueNameCamelUpper}}},
    prepareTest{{{processor.nameCamelUpper}}}Process{{{uniqueNameCamelUpper}}},
    {{/processor.inputStreams}}
} from "../mockProcess";
{{/processor.inputStreams.empty}}
{{#processor.endpoint}}

describe('Web endpoint handler', () => {
    let processor: Processor;

    beforeEach(() => {
        processor = new {{{processor.nameCamelUpper}}}();
    });

    it('responds with ok', async () => {
        const response = await processor.handleWebRequest(mockRequest({
            body: '{}',
        }));
        expect(response.statusCode).toBe(200);
    });
});
{{/processor.endpoint}}
{{^processor.inputStreams.empty}}

describe('SQS message processors', () => {
    let processor: {{{processor.nameCamelUpper}}};
    {{#processor.inputStreams}}
    let process{{{uniqueNameCamelUpper}}}: Test{{{processor.nameCamelUpper}}}Process{{{uniqueNameCamelUpper}}};
    {{/processor.inputStreams}}

    beforeEach(() => {
        processor = new {{{processor.nameCamelUpper}}}();
        {{#processor.inputStreams}}
        process{{{uniqueNameCamelUpper}}} = prepareTest{{{processor.nameCamelUpper}}}Process{{{uniqueNameCamelUpper}}}(processor);
        {{/processor.inputStreams}}
    });
    {{#processor.inputStreams}}

    it('Process {{{uniqueNameCamelUpper}}}', async () => {
        processor.process{{{uniqueNameCamelUpper}}}(
            mockMessage{{{uniqueNameCamelUpper}}}('key', {{>../stream-test-data}}),
            coordinator,
        );
        {{#processor.outputStreams}}
        expect(coordinator.sendTo{{{uniqueNameCamelUpper}}}).not.toHaveBeenCalled();
        {{/processor.outputStreams}}
    });
    {{/processor.inputStreams}}
});
{{/processor.inputStreams.empty}}
