import { Message } from "dataspray-runner";
import {
    {{#processor.web}}
    WebCoordinator,
    {{/processor.web}}
    {{^processor.inputStreams.empty}}
    StreamCoordinator,
    {{/processor.inputStreams.empty}}
} from "./coordinator";
{{#processor.web}}
import {
    APIGatewayProxyStructuredResultV2,
    LambdaFunctionURLEvent,
} from 'aws-lambda';
{{/processor.web}}
{{^processor.dataFormats.empty}}
import {
    {{#processor.dataFormats}}
    {{{nameCamelUpper}}},
    {{/processor.dataFormats}}
} from './streams';
{{/processor.dataFormats.empty}}

export abstract class Processor {
    {{#processor.web}}
    {{^endpoints.empty}}
    {{#endpoints}}

    abstract web{{{nameCamelUpper}}}(
        {{>../web-method-params}}
        coordinator: WebCoordinator): Promise<APIGatewayProxyStructuredResultV2>;
    {{/endpoints}}

    async web(request: LambdaFunctionURLEvent, coordinator: WebCoordinator): Promise<APIGatewayProxyStructuredResultV2> {
        return { statusCode: 404 };
    }
    {{/endpoints.empty}}
    {{#endpoints.empty}}

    abstract web(request: LambdaFunctionURLEvent, coordinator: WebCoordinator): Promise<APIGatewayProxyStructuredResultV2>;
    {{/endpoints.empty}}
    {{/processor.web}}
    {{#processor.inputStreams}}

    abstract stream{{{uniqueNameCamelUpper}}}(message: Message<{{{this.dataFormat.nameCamelUpper}}}>, coordinator: StreamCoordinator): void;
    {{/processor.inputStreams}}
}
