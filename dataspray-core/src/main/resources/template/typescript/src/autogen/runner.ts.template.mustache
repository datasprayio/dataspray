{{#processor.web}}
import {
    APIGatewayProxyStructuredResultV2,
    LambdaFunctionURLEvent,
} from 'aws-lambda';
{{/processor.web}}
import { typer } from 'media-typer';
{{^processor.inputStreams.empty}}
import {
    {{#processor.web}}
    WebCoordinator,
    {{/processor.web}}
    {{^processor.inputStreams.empty}}
    StreamCoordinator,
    {{/processor.inputStreams.empty}}
    CoordinatorImpl,
} from './coordinator';
{{/processor.inputStreams.empty}}
import {
    Entrypoint,
    {{#processor.web}}
    HttpRequest,
    {{/processor.web}}
    {{^processor.inputStreams.empty}}
    Message,
    MessageMetadata,
    RawCoordinator,
    StoreType,
    {{/processor.inputStreams.empty}}
} from 'dataspray-runner';
{{^processor.dataFormats.empty}}
import {
    {{#processor.dataFormats}}
    {{{nameCamelUpper}}},
    {{/processor.dataFormats}}
    {{#processor.jsonDataFormats}}
    validate{{{nameCamelUpper}}},
    {{/processor.jsonDataFormats}}
} from './streams';
{{/processor.dataFormats.empty}}
import { {{{processor.nameCamelUpper}}} } from '../{{{processor.nameCamelLower}}}';
import { Processor } from './processor';

{{#processor.web}}
{{#endpoints}}
{{^contentTypes.empty}}
const ENDPOINT_ALLOWED_CONTENT_TYPES_{{{nameSnakeUpper}}} = [{{#contentTypes}}typer.parse("{{{.}}}"){{^-last}}, {{/-last}}{{/contentTypes}}];
{{#-last}}

{{/-last}}
{{/contentTypes.empty}}
{{/endpoints}}
{{/processor.web}}
class Runner extends Entrypoint {

    private processor: Processor = new {{{processor.nameCamelUpper}}}();
    {{#processor.web}}

    web(request: HttpRequest, rawCoordinator: RawCoordinator): Promise<APIGatewayProxyStructuredResultV2> {
        const coordinator: WebCoordinator = new CoordinatorImpl(rawCoordinator);
        {{^endpoints.empty}}

        const pathDirs: string[] = request.rawPath.split("/");
        const contentType = typer.parse(request.headersMap['content-type'] || 'text/plain')
        {{/endpoints.empty}}
        {{#endpoints}}

        if (
            {{>../web-request-endpoint-match}}
        ) {
            {{#requestDataFormat}}
            {{#isSerdeJson}}
            const bodyJson = JSON.parse(request.body);
            if (!validate{{{nameCamelUpper}}}(bodyJson)) {
                throw new Error(validate{{{nameCamelUpper}}}['errors']);
            }
            {{/isSerdeJson}}
            {{/requestDataFormat}}
            return this.processor.web{{{nameCamelUpper}}}(
                {{>../web-request-to-params}}
                coordinator,
            );
        }
        {{/endpoints}}

        return this.processor.web(request, coordinator);
    }
    {{/processor.web}}
    {{^processor.inputStreams.empty}}

    stream(metadata: MessageMetadata, data: string, rawCoordinator: RawCoordinator): Promise<void> | void {
        const coordinator: StreamCoordinator = new CoordinatorImpl(rawCoordinator{{#processor.hasDynamoState}}, metadata.key{{/processor.hasDynamoState}});
        {{#processor.inputStreams}}if (StoreType.{{{storeType.name}}} === metadata.storeType
                && "{{{storeName}}}" === metadata.storeName
                && "{{{streamName}}}" === metadata.streamName) {
            {{#dataFormat.isSerdeString}}
            this.processor.stream{{{uniqueNameCamelUpper}}}(new Message(metadata, data), coordinator);
            {{/dataFormat.isSerdeString}}
            {{^dataFormat.isSerdeString}}
            this.processor.stream{{{uniqueNameCamelUpper}}}(new Message(metadata, this.to{{{dataFormat.nameCamelUpper}}}(data)), coordinator);
            {{/dataFormat.isSerdeString}}
        } else {{/processor.inputStreams}}{
            throw new Error(`Received unexpected message from ${metadata.storeType} source ${metadata.storeName} stream ${metadata.streamName}`);
        }
    }
    {{#processor.inputStreams}}
    {{^dataFormat.isSerdeString}}

    private to{{{dataFormat.nameCamelUpper}}}(data: string): {{{dataFormat.nameCamelUpper}}} {
        {{#dataFormat.isSerdeBinary}}
        return Buffer.from(data, 'base64').toString('utf8');
        {{/dataFormat.isSerdeBinary}}
        {{#dataFormat.isSerdeJson}}
        const dataJson = JSON.parse(data);
        if (!validate{{{dataFormat.nameCamelUpper}}}(dataJson)) {
            throw new Error(validate{{{dataFormat.nameCamelUpper}}}['errors']);
        }
        return dataJson as {{{dataFormat.nameCamelUpper}}};
        {{/dataFormat.isSerdeJson}}
    }
    {{/dataFormat.isSerdeString}}
    {{/processor.inputStreams}}
    {{/processor.inputStreams.empty}}
}

export const handler = new Runner().handleRequest;
