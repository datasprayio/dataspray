import { Context, APIGatewayProxyResult, APIGatewayEvent } from 'aws-lambda';
import { Coordinator } from './coordinator';
{{#processor.jsonInputStreams}}
import { {{{dataFormat.nameCamelUpper}}} } from './types/{{{dataFormat.nameCamelLower}}}';
{{/processor.jsonInputStreams}}

const {{{processor.nameCamelLower}}}Runner = new {{{processor.nameCamelUpper}}}Runner();

class Runner extends Entrypoint {
    process(metadata: MessageMetadata, data: string, rawCoordinator: RawCoordinator): Promise<void> | void {
        Coordinator coordinator = new Coordinator(rawCoordinator);
        {{#processor.inputStreams}}if (StoreType.{{{storeType.name}}}.equals(metadata.getStoreType())
                && "{{{storeName}}}".equals(metadata.getStoreName())
                && "{{{streamName}}}".equals(metadata.getStreamName())) {
            {{#dataFormat.isSerdeString}}
            processor.process{{{uniqueNameCamelUpper}}}(new MessageImpl(metadata, data), coordinator);
            {{/dataFormat.isSerdeString}}
            {{^dataFormat.isSerdeString}}
            processor.process{{{uniqueNameCamelUpper}}}(new MessageImpl(metadata, this.to{{{dataFormat.nameCamelUpper}}}(data)), coordinator);
            {{/dataFormat.isSerdeString}}
        } else {{/processor.inputStreams}}{
            throw new Error(`Received unexpected message from ${metadata.getStoreType()} source ${metadata.getStoreName()} stream ${metadata.getStreamName()}`);
        }
    }
    {{#processor.inputStreams}}
    {{^dataFormat.isSerdeString}}

    private to{{{dataFormat.nameCamelUpper}}}(data: string) {
        {{#dataFormat.isSerdeBinary}}
        return Buffer.from(data, 'base64').toString('utf8');
        {{/dataFormat.isSerdeBinary}}
        {{#dataFormat.isSerdeJson}}
        return JSON.parse(data) as {{{dataFormat.nameCamelUpper}}};
        {{/dataFormat.isSerdeJson}}
    }
    {{/dataFormat.isSerdeString}}
    {{/processor.inputStreams}}
}

export const handler = new Runner().handle;
