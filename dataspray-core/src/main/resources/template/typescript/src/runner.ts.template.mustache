import {
    APIGatewayEvent,
    APIGatewayProxyResult,
    APIGatewayProxyStructuredResultV2,
    Context,
    LambdaFunctionURLEvent,
} from 'aws-lambda';
import { Coordinator } from './coordinator';
import { Entrypoint, Message, MessageMetadata, RawCoordinator, StoreType } from 'dataspray-runner';
{{^processor.jsonInputStreams.empty}}
import {
{{#processor.jsonInputStreams}}
    {{{dataFormat.nameCamelUpper}}},
    validate{{{dataFormat.nameCamelUpper}}},
{{/processor.jsonInputStreams}}
} from './streams';
{{/processor.jsonInputStreams.empty}}
import { {{{processor.nameCamelUpper}}} } from './{{{processor.nameCamelLower}}}';
import { Processor } from './processor';

class Runner extends Entrypoint {

    private processor: Processor = new {{{processor.nameCamelUpper}}}();

    processSqsEvent(metadata: MessageMetadata, data: string, rawCoordinator: RawCoordinator): Promise<void> | void {
        const coordinator: Coordinator = new Coordinator(rawCoordinator);
        {{#processor.inputStreams}}if (StoreType.{{{storeType.name}}} === metadata.storeType
                && "{{{storeName}}}" === metadata.storeName
                && "{{{streamName}}}" === metadata.streamName) {
            {{#dataFormat.isSerdeString}}
            this.processor.process{{{uniqueNameCamelUpper}}}(new Message(metadata, data), coordinator);
            {{/dataFormat.isSerdeString}}
            {{^dataFormat.isSerdeString}}
            this.processor.process{{{uniqueNameCamelUpper}}}(new Message(metadata, this.to{{{dataFormat.nameCamelUpper}}}(data)), coordinator);
            {{/dataFormat.isSerdeString}}
        } else {{/processor.inputStreams}}{
            throw new Error(`Received unexpected message from ${metadata.storeType} source ${metadata.storeName} stream ${metadata.streamName}`);
        }
    }
    {{#processor.inputStreams}}
    {{^dataFormat.isSerdeString}}

    private to{{{dataFormat.nameCamelUpper}}}(data: string): {{{dataFormat.nameCamelUpper}}} {
        {{#dataFormat.isSerdeBinary}}
        return Buffer.from(data, 'base64').toString('utf8');
        {{/dataFormat.isSerdeBinary}}
        {{#dataFormat.isSerdeJson}}
        const dataJson = JSON.parse(data);
        if (!validate{{{dataFormat.nameCamelUpper}}}(dataJson)) {
            throw new Error(validate{{{dataFormat.nameCamelUpper}}}['errors']);
        }
        return dataJson as {{{dataFormat.nameCamelUpper}}};
        {{/dataFormat.isSerdeJson}}
    }
    {{/dataFormat.isSerdeString}}
    {{/processor.inputStreams}}

    processFunctionUrl(request: LambdaFunctionURLEvent): Promise<APIGatewayProxyStructuredResultV2> {
        {{#processor.endpoint}}if (StoreType.{{{storeType.name}}} === metadata.storeType
            && "{{{storeName}}}" === metadata.storeName
            && "{{{streamName}}}" === metadata.streamName) {
            {{#dataFormat.isSerdeString}}
                this.processor.process{{{uniqueNameCamelUpper}}}(new Message(metadata, data), coordinator);
            {{/dataFormat.isSerdeString}}
            {{^dataFormat.isSerdeString}}
                this.processor.process{{{uniqueNameCamelUpper}}}(new Message(metadata, this.to{{{dataFormat.nameCamelUpper}}}(data)), coordinator);
            {{/dataFormat.isSerdeString}}
            } else
        {{/processor.endpoint}}
        {{^processor.endpoint}}
        throw new Error(`Received unexpected web request from ${request.http.sourceIp} for path ${request.http.path}`);
        {{/processor.endpoint}}
    }
}

export const handler = new Runner().handleRequest;
