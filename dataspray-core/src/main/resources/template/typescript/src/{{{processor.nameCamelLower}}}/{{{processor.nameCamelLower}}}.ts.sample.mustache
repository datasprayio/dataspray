
import { Context, APIGatewayProxyResult, APIGatewayEvent } from 'aws-lambda';
import { Entrypoint } from 'dataspray-runner';

class {{{processor.nameCamelUpper}}}Runner extends Entrypoint {

    {{{processor.nameCamelLower}}}Processor: {{{processor.nameCamelUpper}}}Processor;

    constructor() {
        this.{{{processor.nameCamelLower}}}Processor = new {{{processor.nameCamelUpper}}}Processor();
    }

    async process(
        metadata: MessageMetadata,
        data: string,
        rawCoordinator: RawCoordinator,
    ): Promise<void> | void {
        coordinator: Coordinator = new Coordinator(rawCoordinator);
        {{#processor.inputStreams}}if (StoreType.{{{storeType.name}}} === metadata.getStoreType()
                && "{{{storeName}}}" === metadata.getStoreName()
                && "{{{streamName}}}" === metadata.getStreamName()) {
            {{#dataFormat.isSerdeBinary}}
            this.processor.process{{{uniqueNameCamelUpper}}}(new MessageImpl(metadata, data), coordinator);
            {{/dataFormat.isSerdeBinary}}
            {{^dataFormat.isSerdeBinary}}
            this.processor.process{{{uniqueNameCamelUpper}}}(new MessageImpl(metadata, to{{{dataFormat.nameCamelUpper}}}(data)), coordinator);
            {{/dataFormat.isSerdeBinary}}
        } else {{/processor.inputStreams}}{
            throw new Error(`Received unexpected message from  ${metadata.getStoreType()} source ${metadata.getStoreName()} stream ${metadata.getStreamName()}`);
        }

        this.{{{processor.nameCamelLower}}}Processor.process(event, coordinator);
    }
    {{#processor.inputStreams}}

    to{{{dataFormat.nameCamelUpper}}}(data: byte[]): {{{dataFormat.nameCamelUpper}}} {
        {{#dataFormat.isSerdeString}}
        return new String(data, StandardCharsets.UTF_8);
        {{/dataFormat.isSerdeString}}
        {{#dataFormat.isSerdeJson}}
        return gson.fromJson(new String(data, StandardCharsets.UTF_8), {{{dataFormat.nameCamelUpper}}}.class);
        {{/dataFormat.isSerdeJson}}
        {{#dataFormat.isSerdeProtobuf}}
        {{#util.throw}}Protobuf deserialization not supported yet.{{/util.throw}}
        {{/dataFormat.isSerdeProtobuf}}
        {{#dataFormat.isSerdeAvro}}
        {{#util.throw}}Avro deserialization not supported yet.{{/util.throw}}
        {{/dataFormat.isSerdeAvro}}
    }
    {{/processor.inputStreams}}
}

export default {{{processor.nameCamelUpper}}}Runner;
