package {{{definition.javaPackage}}}.autogen;

{{#util.javaImportsFormat}}
import lombok.SneakyThrows;
import io.dataspray.runner.RawCoordinator;
import io.dataspray.runner.StoreType;
{{#processor.hasJsonDataFormat}}
import io.dataspray.runner.util.GsonUtil;
{{/processor.hasJsonDataFormat}}
{{^processor.stringOutputStreams.empty}}
import java.nio.charset.StandardCharsets;
{{/processor.stringOutputStreams.empty}}
{{^processor.jsonOutputStreams.empty}}
import java.nio.charset.StandardCharsets;
{{/processor.jsonOutputStreams.empty}}
{{^processor.avroOutputStreams.empty}}
import java.io.ByteArrayOutputStream;
{{/processor.avroOutputStreams.empty}}
{{#processor.hasDynamoState}}
import io.dataspray.runner.StateManager;
import java.time.Duration;
import java.util.Optional;
import software.amazon.awssdk.services.dynamodb.DynamoDbClient;
{{/processor.hasDynamoState}}
{{/util.javaImportsFormat}}

public class CoordinatorImpl implements {{#processor.web}}WebCoordinator{{#processor.hasInputStreams}}, {{/processor.hasInputStreams}}{{/processor.web}}{{#processor.hasInputStreams}}StreamCoordinator{{/processor.hasInputStreams}} {

    private final RawCoordinator rawCoordinator;
    {{#processor.hasDynamoState}}
    private final Optional<String> messageKey;
    {{/processor.hasDynamoState}}

    public CoordinatorImpl(
        RawCoordinator rawCoordinator{{#processor.hasDynamoState}},
        Optional<String> messageKey{{/processor.hasDynamoState}}
    ) {
        this.rawCoordinator = rawCoordinator;
        {{#processor.hasDynamoState}}
        this.messageKey = messageKey;
        {{/processor.hasDynamoState}}
    }
    {{#processor.hasDynamoState}}
    {{#processor.hasInputStreams}}

    @Override
    public StateManager stateForMessageKey(Optional<Duration> ttl) {
        return stateForNamespace(ttl, "task", "{{{processor.taskId}}}", "key", messageKey
            .orElseThrow(() -> new IllegalStateException("messageKey is not set")));
    }
    {{/processor.hasInputStreams}}

    @Override
    public StateManager stateForTask(Optional<Duration> ttl) {
        return stateForNamespace(ttl, "task", "{{{processor.taskId}}}");
    }

    @Override
    public StateManager stateForNamespace(Optional<Duration> ttl, String... namespace) {
        return rawCoordinator.getStateManager(namespace, ttl.orElse(null));
    }

    @Override
    public DynamoDbClient getDynamoClient() {
        return rawCoordinator.getDynamoClient();
    }
    {{/processor.hasDynamoState}}
    {{#processor.outputStreams}}

    @Override
    @SneakyThrows
    public void sendTo{{{uniqueNameCamelUpper}}}(String messageKey, {{{dataFormat.nameCamelUpper}}} {{{dataFormat.nameCamelLower}}}) {
        sendTo{{{uniqueNameCamelUpper}}}(messageKey, {{{dataFormat.nameCamelLower}}}, null);
    }

    @Override
    @SneakyThrows
    public void sendTo{{{uniqueNameCamelUpper}}}(String messageKey, {{{dataFormat.nameCamelUpper}}} {{{dataFormat.nameCamelLower}}}, String messageId) {
        {{#dataFormat.isSerdeAvro}}
        byte[] {{{dataFormat.nameCamelLower}}}Bytes;
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            {{{dataFormat.nameCamelUpper}}}.getEncoder().encode({{{dataFormat.nameCamelLower}}}, baos);
            {{{dataFormat.nameCamelLower}}}Bytes = baos.toByteArray();
        }

        {{/dataFormat.isSerdeAvro}}
        rawCoordinator.send(
            messageKey,
            {{#dataFormat.isSerdeBinary}}
            {{{dataFormat.nameCamelLower}}},
            {{/dataFormat.isSerdeBinary}}
            {{#dataFormat.isSerdeString}}
            {{{dataFormat.nameCamelLower}}}.getBytes(StandardCharsets.UTF_8),
            {{/dataFormat.isSerdeString}}
            {{#dataFormat.isSerdeJson}}
            GsonUtil.get().toJson({{{dataFormat.nameCamelLower}}}).getBytes(StandardCharsets.UTF_8),
            {{/dataFormat.isSerdeJson}}
            {{#dataFormat.isSerdeProtobuf}}
            {{{nameCamelUpper}}}.toByteArray(),
            {{/dataFormat.isSerdeProtobuf}}
            {{#dataFormat.isSerdeAvro}}
            {{{dataFormat.nameCamelLower}}}Bytes,
            {{/dataFormat.isSerdeAvro}}
            StoreType.{{{storeType.name}}},
            "{{{storeName}}}",
            "{{{streamName}}}",
            messageId);
    }
    {{/processor.outputStreams}}
}
