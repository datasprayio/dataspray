package {{{definition.javaPackage}}};

{{#util.javaImportsFormat}}
import lombok.SneakyThrows;
import io.dataspray.runner.RawCoordinator;
import io.dataspray.runner.StoreType;
{{^processor.stringOutputStreams.empty}}
import java.nio.charset.StandardCharsets;
{{/processor.stringOutputStreams.empty}}
{{^processor.jsonOutputStreams.empty}}
import java.nio.charset.StandardCharsets;
{{/processor.jsonOutputStreams.empty}}
{{^processor.avroOutputStreams.empty}}
import java.io.ByteArrayOutputStream;
{{/processor.avroOutputStreams.empty}}
{{/util.javaImportsFormat}}

public class CoordinatorImpl implements Coordinator {

    private final RawCoordinator rawCoordinator;
    {{#processor.state.isPresent}}
    private final String messageKey;
    {{/processor.state.isPresent}}

    public CoordinatorImpl(
        RawCoordinator rawCoordinator{{#processor.state.isPresent}},
        String messageKey{{/processor.state.isPresent}}
    ) {
        this.rawCoordinator = rawCoordinator;
        {{#processor.state.isPresent}}
        this.messageKey = messageKey;
        {{/processor.state.isPresent}}
    }
    {{#processor.state.isPresent}}
    {{#isDynamo}}

    @Override
    StateManager stateForMessageKey(Optional<Duration> ttl) {
        return stateForGlobalNamespace(ttl, "{{{processor.taskId}}}", messageKey);
    }

    @Override
    StateManager stateForProcessor(Optional<Duration> ttl) {
        return stateForGlobalNamespace(ttl, "{{{processor.taskId}}}");
    }

    @Override
    StateManager stateForNamespace(Optional<Duration> ttl, String... namespace) {
        return rawCoordinator.getStateManager(namespace, ttl);
    }
    {{/isDynamo}}
    {{/processor.state.isPresent}}
    {{#processor.outputStreams}}

    @Override
    @SneakyThrows
    public void sendTo{{{uniqueNameCamelUpper}}}(String messageKey, {{{dataFormat.nameCamelUpper}}} {{{dataFormat.nameCamelLower}}}, String messageId) {
        {{#dataFormat.isSerdeAvro}}
        byte[] {{{dataFormat.nameCamelLower}}}Bytes;
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            {{{dataFormat.nameCamelUpper}}}.getEncoder().encode({{{dataFormat.nameCamelLower}}}, baos);
            {{{dataFormat.nameCamelLower}}}Bytes = baos.toByteArray();
        }

        {{/dataFormat.isSerdeAvro}}
        rawCoordinator.send(
            messageKey,
            {{#dataFormat.isSerdeBinary}}
            {{{dataFormat.nameCamelLower}}},
            {{/dataFormat.isSerdeBinary}}
            {{#dataFormat.isSerdeString}}
            {{{dataFormat.nameCamelLower}}}.getBytes(StandardCharsets.UTF_8),
            {{/dataFormat.isSerdeString}}
            {{#dataFormat.isSerdeJson}}
            gson.toJson({{{dataFormat.nameCamelLower}}}).getBytes(StandardCharsets.UTF_8),
            {{/dataFormat.isSerdeJson}}
            {{#dataFormat.isSerdeProtobuf}}
            {{{nameCamelUpper}}}.toByteArray(),
            {{/dataFormat.isSerdeProtobuf}}
            {{#dataFormat.isSerdeAvro}}
            {{{dataFormat.nameCamelLower}}}Bytes,
            {{/dataFormat.isSerdeAvro}}
            StoreType.{{{storeType.name}}},
            "{{{storeName}}}",
            "{{{streamName}}}",
            messageId);
    }
    {{/processor.outputStreams}}
}
