package {{{definition.javaPackage}}}.autogen;

{{#util.javaImportsFormat}}
{{^processor.outputStreams.empty}}
import jakarta.annotation.Nullable;
{{/processor.outputStreams.empty}}
{{#processor.hasDynamoState}}
import io.dataspray.runner.StateManager;
import java.time.Duration;
import java.util.Optional;
{{/processor.hasDynamoState}}
{{/util.javaImportsFormat}}

public interface Coordinator {
    {{#processor.hasDynamoState}}

    /**
     * State management backed by DynamoDB and unique for each message key within a task.
     * <p>
     * Identical to calling {@link #stateForNamespace}{@code (ttl, "task", <task_name>, "key", <message_key>)}.
     * Each state has a combined limit of 1MB. Writes are buffered and flushed after each message batch.
     * @param ttl Optional second-precision time-to-live for the state. Resets on every write.
     */
    StateManager stateForMessageKey(Optional<Duration> ttl);

    /**
     * State management backed by DynamoDB and unique for entire task.
     * <p>
     * Identical to calling {@link #stateForNamespace}{@code (ttl, "task", <task_name>)}.
     * Each state has a combined limit of 1MB. Writes are buffered and flushed after each message batch.
     * @param ttl Optional second-precision time-to-live for the state. Resets on every write.
     */
    StateManager stateForTask(Optional<Duration> ttl);

    /**
     * State management backed by DynamoDB with custom namespace.
     * <p>
     * Each state has a combined limit of 1MB. Writes are buffered and flushed after each message batch.
     * @param ttl Optional second-precision time-to-live for the state. Resets on every write.
     * @param namespace Unique key for the state.
     */
    StateManager stateForNamespace(Optional<Duration> ttl, String... namespace);
    {{/processor.hasDynamoState}}
    {{#processor.outputStreams}}

    /**
     * Sends a message to {{{storeName}}} {{{streamName}}}.
     *
     * @param messageKey Entity of the message used for partitioning (e.g. Session ID, Email, IP address)
     * @param {{{dataFormat.nameCamelLower}}} Content of the message
     */
    default void sendTo{{{uniqueNameCamelUpper}}}(String messageKey, {{{dataFormat.nameCamelUpper}}} {{{dataFormat.nameCamelLower}}}) {
        sendTo{{{uniqueNameCamelUpper}}}(messageKey, {{{dataFormat.nameCamelLower}}}, null);
    }

    /**
     * Sends a message to {{{storeName}}} {{{streamName}}}.
     *
     * @param messageKey Entity of the message used for partitioning (e.g. Session ID, Email, IP address)
     * @param {{{dataFormat.nameCamelLower}}} Content of the message
     * @param messageId Optional unique ID of the message used for de-duplication (e.g. Transaction ID)
     */
    void sendTo{{{uniqueNameCamelUpper}}}(String messageKey, {{{dataFormat.nameCamelUpper}}} {{{dataFormat.nameCamelLower}}}, @Nullable String messageId);
    {{/processor.outputStreams}}
}
