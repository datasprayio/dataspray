package {{{definition.javaPackage}}};

{{#util.javaImportsFormat}}
import {{{definition.javaPackage}}}.autogen.Processor;
{{#processor.dataFormats}}
import {{{definition.javaPackage}}}.autogen.{{{nameCamelUpper}}};
{{/processor.dataFormats}}
{{^processor.inputStreams.empty}}
import io.dataspray.runner.Message;
import {{{definition.javaPackage}}}.autogen.StreamCoordinator;
{{/processor.inputStreams.empty}}
{{#processor.web}}
import jakarta.annotation.Nullable;
import io.dataspray.runner.dto.web.HttpResponse;
import io.dataspray.runner.dto.web.HttpResponse.HttpResponseBuilder;
import {{{definition.javaPackage}}}.autogen.WebCoordinator;
{{#endpoints.empty}}
import io.dataspray.runner.dto.web.HttpRequest;
{{/endpoints.empty}}
{{/processor.web}}
{{/util.javaImportsFormat}}

public class {{{processor.nameCamelUpper}}} implements Processor {
    {{#processor.web}}
    {{#endpoints}}

    public HttpResponse web{{{nameCamelUpper}}}(
        {{>../../../web-method-params}}
        HttpResponseBuilder<{{#responseDataFormat}}{{{nameCamelUpper}}}{{/responseDataFormat}}{{^responseDataFormat}}Object{{/responseDataFormat}}> responseBuilder,
        WebCoordinator coordinator
    ) {

        // TODO
        return responseBuilder.ok().build();
    }
    {{/endpoints}}
    {{#endpoints.empty}}

    @Override
    public HttpResponse web(HttpRequest request, HttpResponseBuilder<Object> responseBuilder
    ) {
        // TODO
        return responseBuilder.ok().build();
    }
    {{/endpoints.empty}}
    {{/processor.web}}
    {{#processor.inputStreams}}

    @Override
    public void stream{{{uniqueNameCamelUpper}}}(
        Message<{{{this.dataFormat.nameCamelUpper}}}> message,
        StreamCoordinator coordinator
    ) {
        // TODO
        {{#processor.outputStreams}}
        // coordinator.sendTo{{{uniqueNameCamelUpper}}}({{>stream-sample-data}});
        {{/processor.outputStreams}}
    }
    {{/processor.inputStreams}}
}
