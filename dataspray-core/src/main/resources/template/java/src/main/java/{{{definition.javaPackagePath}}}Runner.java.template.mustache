package {{{definition.javaPackage}}};

{{#util.javaImportsFormat}}
import java.util.Base64;
import lombok.SneakyThrows;
{{^processor.avroInputStreams.empty}}
import java.io.IOException;
{{/processor.avroInputStreams.empty}}
{{^processor.jsonInputStreams.empty}}
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.nio.charset.StandardCharsets;
{{/processor.jsonInputStreams.empty}}
import io.dataspray.runner.Entrypoint;
import io.dataspray.runner.MessageImpl;
import io.dataspray.runner.MessageMetadata;
import io.dataspray.runner.RawCoordinator;
import io.dataspray.runner.StoreType;
{{^processor.stringInputStreams.empty}}
import java.nio.charset.StandardCharsets;
{{/processor.stringInputStreams.empty}}
{{/util.javaImportsFormat}}

public class Runner extends Entrypoint {

    private final Processor processor = new {{{processor.nameCamelUpper}}}();
    {{^processor.jsonInputStreams.empty}}
    private final Gson gson = new GsonBuilder()
        .setFieldNamingPolicy(FieldNamingPolicy.IDENTITY)
        .disableHtmlEscaping()
        .create();
    {{/processor.jsonInputStreams.empty}}

    @Override
    public void process(MessageMetadata metadata, String data, RawCoordinator rawCoordinator) {
        Coordinator coordinator = new GeneratedCoordinator(rawCoordinator);
        {{#processor.inputStreams}}if (StoreType.{{{storeType.name}}}.equals(metadata.getStoreType())
                && "{{{storeName}}}".equals(metadata.getStoreName())
                && "{{{streamName}}}".equals(metadata.getStreamName())) {
            {{#dataFormat.isSerdeString}}
            processor.process{{{uniqueNameCamelUpper}}}(new MessageImpl(metadata, data), coordinator);
            {{/dataFormat.isSerdeString}}
            {{^dataFormat.isSerdeString}}
            processor.process{{{uniqueNameCamelUpper}}}(new MessageImpl(metadata, to{{{dataFormat.nameCamelUpper}}}(data)), coordinator);
            {{/dataFormat.isSerdeString}}
        } else {{/processor.inputStreams}}{
            throw new RuntimeException("Received unexpected message from " + metadata.getStoreType() + " source " + metadata.getStoreName() + " stream " + metadata.getStreamName());
        }
    }
    {{#processor.inputStreams}}
    {{^dataFormat.isSerdeString}}

    @SneakyThrows
    private {{{dataFormat.nameCamelUpper}}} to{{{dataFormat.nameCamelUpper}}}(String data) {
        {{#dataFormat.isSerdeBinary}}
        return Base64.getDecoder().decode(data);
        {{/dataFormat.isSerdeBinary}}
        {{#dataFormat.isSerdeJson}}
        return gson.fromJson(data, {{{dataFormat.nameCamelUpper}}}.class);
        {{/dataFormat.isSerdeJson}}
        {{#dataFormat.isSerdeProtobuf}}
        return {{{dataFormat.nameCamelUpper}}}.parseFrom(Base64.getDecoder().decode(data));
        {{/dataFormat.isSerdeProtobuf}}
        {{#dataFormat.isSerdeAvro}}
        return {{{dataFormat.nameCamelUpper}}}.getDecoder().decode(Base64.getDecoder().decode(data));
        {{/dataFormat.isSerdeAvro}}
    }
    {{/dataFormat.isSerdeString}}
    {{/processor.inputStreams}}
}
