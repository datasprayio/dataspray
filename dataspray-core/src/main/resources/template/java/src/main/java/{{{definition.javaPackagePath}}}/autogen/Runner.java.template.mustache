package {{{definition.javaPackage}}}.autogen;

{{#util.javaImportsFormat}}
import java.util.Base64;
import lombok.SneakyThrows;
import {{{definition.javaPackage}}}.{{{processor.nameCamelUpper}}};
{{^processor.avroInputStreams.empty}}
import java.io.IOException;
{{/processor.avroInputStreams.empty}}
{{^processor.jsonInputStreams.empty}}
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
{{/processor.jsonInputStreams.empty}}
{{#processor.inputStreams}}
import {{{definition.javaPackage}}}.{{{dataFormat.nameCamelUpper}}};
{{/processor.inputStreams}}
import io.dataspray.runner.Entrypoint;
import io.dataspray.runner.MessageImpl;
import io.dataspray.runner.MessageMetadata;
import io.dataspray.runner.RawCoordinator;
import io.dataspray.runner.StoreType;
{{^processor.stringInputStreams.empty}}
import java.nio.charset.StandardCharsets;
{{/processor.stringInputStreams.empty}}
{{#processor.web}}
import io.dataspray.runner.dto.web.HttpRequest;
import io.dataspray.runner.dto.web.HttpResponse;
{{/processor.web}}
{{/util.javaImportsFormat}}

public class Runner extends Entrypoint {

    {{#processor.web}}
    {{#endpoints}}
    {{^contentTypes.empty}}
    private static final List<MediaType> ENDPOINT_ALLOWED_CONTENT_TYPES_{{{nameSnakeUpper}}} = ImmutableList.of({{#contentTypes}}MediaType.valueOf("{{{.}}}"){{^-last}}, {{/-last}}{{/contentTypes}});
    {{/contentTypes.empty}}
    {{/endpoints}}
    {{/processor.web}}
    private final Processor processor = new {{{processor.nameCamelUpper}}}();
    {{#processor.hasJsonDataFormat}}
    private final Gson gson = new GsonBuilder()
        .setFieldNamingPolicy(FieldNamingPolicy.IDENTITY)
        .disableHtmlEscaping()
        .create();
    {{/processor.hasJsonDataFormat}}
    {{#processor.web}}

    @Override
    public HttpResponse web(HttpRequest request, HttpResponse.HttpResponseBuilder responseBuilder) {
        {{^endpoints.empty}}

        String[] pathDirs = request.getPath().split("/");
        {{/endpoints.empty}}
        {{#endpoints}}

        if (
            {{>web-request-endpoint-match}}
        ) {
            return processor.web{{{nameCamelUpper}}}(
                {{>web-request-to-params}}
                responseBuilder
            );
        }
        {{/endpoints}}

        return processor.web(request, responseBuilder);
    }
    {{/processor.web}}
    {{^processor.inputStreams.empty}}

    @Override
    public void processSqsEvent(MessageMetadata metadata, String data, RawCoordinator rawCoordinator) {
        Coordinator coordinator = new CoordinatorImpl(
            rawCoordinator{{#processor.hasDynamoState}},
            metadata.getKey(){{/processor.hasDynamoState}}
        );
        {{#processor.inputStreams}}if (StoreType.{{{storeType.name}}}.equals(metadata.getStoreType())
                && "{{{storeName}}}".equals(metadata.getStoreName())
                && "{{{streamName}}}".equals(metadata.getStreamName())) {
            {{#dataFormat.isSerdeString}}
            processor.stream{{{uniqueNameCamelUpper}}}(new MessageImpl<>(metadata, data), coordinator);
            {{/dataFormat.isSerdeString}}
            {{^dataFormat.isSerdeString}}
            processor.stream{{{uniqueNameCamelUpper}}}(new MessageImpl<>(metadata, to{{{dataFormat.nameCamelUpper}}}(data)), coordinator);
            {{/dataFormat.isSerdeString}}
        } else {{/processor.inputStreams}}{
            throw new RuntimeException("Received unexpected message from " + metadata.getStoreType() + " source " + metadata.getStoreName() + " stream " + metadata.getStreamName());
        }
    }
    {{#processor.inputStreams}}
    {{^dataFormat.isSerdeString}}

    @SneakyThrows
    private {{{dataFormat.nameCamelUpper}}} to{{{dataFormat.nameCamelUpper}}}(String data) {
        {{#dataFormat.isSerdeBinary}}
        return Base64.getDecoder().decode(data);
        {{/dataFormat.isSerdeBinary}}
        {{#dataFormat.isSerdeJson}}
        return gson.fromJson(data, {{{dataFormat.nameCamelUpper}}}.class);
        {{/dataFormat.isSerdeJson}}
        {{#dataFormat.isSerdeProtobuf}}
        return {{{dataFormat.nameCamelUpper}}}.parseFrom(Base64.getDecoder().decode(data));
        {{/dataFormat.isSerdeProtobuf}}
        {{#dataFormat.isSerdeAvro}}
        return {{{dataFormat.nameCamelUpper}}}.getDecoder().decode(Base64.getDecoder().decode(data));
        {{/dataFormat.isSerdeAvro}}
    }
    {{/dataFormat.isSerdeString}}
    {{/processor.inputStreams}}
    {{/processor.inputStreams.empty}}
}
