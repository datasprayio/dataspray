package {{{definition.javaPackage}}};

{{#util.javaImportsFormat}}
import org.junit.Test;
import {{{definition.javaPackage}}}.autogen.AbstractTest;
{{#processor.dataFormats}}
import {{{definition.javaPackage}}}.autogen.{{{nameCamelUpper}}};
{{/processor.dataFormats}}
{{^processor.inputStreams.empty}}
import org.mockito.Mockito;
import {{{definition.javaPackage}}}.autogen.TestCoordinator;
{{#processor.dataFormats}}
import {{{definition.javaPackage}}}.autogen.{{{nameCamelUpper}}};
{{/processor.dataFormats}}
{{/processor.inputStreams.empty}}
{{#processor.web}}
import org.junit.Assert;
import io.dataspray.runner.dto.web.MockHttpRequest;
import io.dataspray.runner.dto.web.HttpResponse;
{{/processor.web}}
{{/util.javaImportsFormat}}

public class {{{processor.nameCamelUpper}}}Test extends AbstractTest {
    {{#processor.web}}
    {{#endpoints}}

    @Test(timeout = 10_000)
    public void testWeb{{{nameCamelUpper}}}() {

        TestCoordinator coordinator = TestCoordinator.createForWeb();
        HttpResponse response = processor.web{{{nameCamelUpper}}}(
                {{>../../../web-method-mock-values}}
                HttpResponse.builder(),
                coordinator);

        Assert.assertEquals(204, response.getStatusCode());
        {{#processor.outputStreams}}
        {{#-first}}coordinator{{/-first}}{{^-first}}    {{/-first}}.assertSentNone{{{dataFormat.nameCamelUpper}}}(){{#-last}};{{/-last}}
        {{/processor.outputStreams}}
    }
    {{/endpoints}}
    {{#endpoints.empty}}

    @Test(timeout = 10_000)
    public void testWeb() {

        TestCoordinator coordinator = TestCoordinator.createForWeb();
        HttpResponse response = processor.web(
                MockHttpRequest.builder()
                        .method("GET")
                        .path("/")
                        .bodyAsString("ping")
                        .build(),
                HttpResponse.builder(),
                coordinator);

        Assert.assertEquals(204, response.getStatusCode());
        {{#processor.outputStreams}}
        {{#-first}}coordinator{{/-first}}{{^-first}}    {{/-first}}.assertSentNone{{{dataFormat.nameCamelUpper}}}(){{#-last}};{{/-last}}
        {{/processor.outputStreams}}
    }
    {{/endpoints.empty}}
    {{/processor.web}}
    {{#processor.inputStreams}}

    @Test(timeout = 10_000)
    public void test{{{uniqueNameCamelUpper}}}() {

        stream{{{uniqueNameCamelUpper}}}("messageKey", {{>stream-test-data}}, "messageId"){{#processor.outputStreams}}
                .assertSentNone{{{dataFormat.nameCamelUpper}}}(){{/processor.outputStreams}};
    }
    {{/processor.inputStreams}}
}
