package {{{definition.javaPackage}}};

{{#util.javaImportsFormat}}
import org.junit.Before;
import io.dataspray.runner.StoreType;
import java.util.UUID;
{{/util.javaImportsFormat}}

public class AbstractTest {

    protected Processor processor;

    @Before
    public void initializeAbstractTest() {
        processor = new {{{processor.nameCamelUpper}}}();
    }
    {{#processor.inputStreams}}

    public TestCoordinator process{{{uniqueNameCamelUpper}}}(String messageKey, {{{dataFormat.nameCamelUpper}}} {{{dataFormat.nameCamelLower}}}) {
        return process{{{uniqueNameCamelUpper}}}(messageKey, {{{dataFormat.nameCamelLower}}}, UUID.randomUUID().toString());
    }

    public TestCoordinator process{{{uniqueNameCamelUpper}}}(String messageKey, {{{dataFormat.nameCamelUpper}}} {{{dataFormat.nameCamelLower}}}, String messageId) {
        TestMessage<{{{dataFormat.nameCamelUpper}}}> message = new TestMessage<>(
                StoreType.{{{storeType.name}}},
                "{{{storeName}}}",
                "{{{streamName}}}",
                messageKey,
                messageId,
                {{{dataFormat.nameCamelLower}}});
        TestCoordinator coordinator = new TestCoordinator({{#processor.hasDynamoState}}messageKey{{/processor.hasDynamoState}});
        processor.process{{{uniqueNameCamelUpper}}}(message, coordinator);
        return coordinator;
    }
    {{/processor.inputStreams}}
}
