package {{{definition.javaPackage}}};

{{#util.javaImportsFormat}}
{{^processor.outputStreams.empty}}
import io.dataspray.runner.Message;
import io.dataspray.runner.StoreType;
import lombok.SneakyThrows;
import java.util.Collections;
import java.util.List;
import com.google.common.collect.Lists;
import com.google.common.collect.ImmutableList;
import static org.junit.jupiter.api.Assertions.*;
{{/processor.outputStreams.empty}}
{{#processor.hasDynamoState}}
import io.dataspray.runner.StateManager;
import java.time.Duration;
import java.util.Optional;
import software.amazon.awssdk.services.dynamodb.DynamoDbClient;
import jakarta.annotation.Nullable;
import static com.google.common.base.Preconditions.checkState;
import org.mockito.Mockito;
import io.dataspray.singletable.SingleTable;
import {{{definition.javaPackage}}}.SingleTableProvider;
{{/processor.hasDynamoState}}
{{/util.javaImportsFormat}}

public class TestCoordinator implements {{#processor.web}}WebCoordinator{{#processor.hasInputStreams}}, {{/processor.hasInputStreams}}{{/processor.web}}{{#processor.hasInputStreams}}StreamCoordinator{{/processor.hasInputStreams}} {

    {{#processor.outputStreams}}
    private final List<Message<{{{dataFormat.nameCamelUpper}}}>> sent{{{uniqueNameCamelUpper}}} = Collections.synchronizedList(Lists.newArrayList());
    {{/processor.outputStreams}}
    {{#processor.hasDynamoState}}
    private final DynamoDbClient dynamo = Mockito.mock(DynamoDbClient.class);
    @Nullable private final String messageKey;
    {{/processor.hasDynamoState}}

    private TestCoordinator({{#processor.hasDynamoState}}@Nullable String messageKey{{/processor.hasDynamoState}}) {
        {{#processor.hasDynamoState}}
        this.messageKey = messageKey;
        {{/processor.hasDynamoState}}
    }
    {{#processor.hasInputStreams}}

    public static TestCoordinator createForStream({{#processor.hasDynamoState}}String messageKey{{/processor.hasDynamoState}}) {
        return new TestCoordinator({{#processor.hasDynamoState}}messageKey{{/processor.hasDynamoState}});
    }
    {{/processor.hasInputStreams}}
    {{#processor.web}}

    public static TestCoordinator createForWeb() {
        return new TestCoordinator({{#processor.hasDynamoState}}null{{/processor.hasDynamoState}});
    }
    {{/processor.web}}
    {{#processor.hasDynamoState}}
    {{#processor.hasInputStreams}}

    @Override
    public StateManager stateForMessageKey(Optional<Duration> ttl) {
        checkState(messageKey != null, "messageKey is not set");
        return stateForNamespace(ttl, "task", "{{{processor.processorId}}}", "key", messageKey);
    }
    {{/processor.hasInputStreams}}

    @Override
    public StateManager stateForTask(Optional<Duration> ttl) {
        return stateForNamespace(ttl, "task", "{{{processor.processorId}}}");
    }

    @Override
    public StateManager stateForNamespace(Optional<Duration> ttl, String... namespace) {
        return new TestStateManager(ttl, namespace);
    }

    @Override
    public DynamoDbClient getDynamoClient() {
        return dynamo;
    }

    @Override
    public SingleTable getSingleTable() {
        return SingleTableProvider.get();
    }
    {{/processor.hasDynamoState}}
    {{#processor.outputStreams}}

    @Override
    @SneakyThrows
    public void sendTo{{{uniqueNameCamelUpper}}}(String messageKey, {{{dataFormat.nameCamelUpper}}} {{{dataFormat.nameCamelLower}}}) {
        sendTo{{{uniqueNameCamelUpper}}}(messageKey, {{{dataFormat.nameCamelLower}}}, null);
    }

    @SneakyThrows
    public void sendTo{{{uniqueNameCamelUpper}}}(String messageKey, {{{dataFormat.nameCamelUpper}}} {{{dataFormat.nameCamelLower}}}, String messageId) {
        sent{{{uniqueNameCamelUpper}}}.add(new TestMessage<>(
                StoreType.{{{storeType.name}}},
                "{{{storeName}}}",
                "{{{streamName}}}",
                messageKey,
                messageId,
                {{{dataFormat.nameCamelLower}}}));
    }
    {{/processor.outputStreams}}
    {{#processor.outputStreams}}

    public ImmutableList<Message<{{{dataFormat.nameCamelUpper}}}>> getSent{{{dataFormat.nameCamelUpper}}}() {
        return ImmutableList.copyOf(sent{{{uniqueNameCamelUpper}}});
    }
    {{/processor.outputStreams}}
    {{#processor.outputStreams}}

    public TestCoordinator assertSentNone{{{dataFormat.nameCamelUpper}}}() {
        assertTrue(sent{{{uniqueNameCamelUpper}}}.isEmpty());
        return this;
    }
    {{/processor.outputStreams}}
}
