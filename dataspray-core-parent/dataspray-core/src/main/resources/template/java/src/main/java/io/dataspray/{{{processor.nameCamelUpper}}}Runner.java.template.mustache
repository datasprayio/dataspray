package io.dataspray;

{{#processor.jsonInputStreams.size}}
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
{{/processor.jsonInputStreams.size}}
import io.dataspray.runner.Message;
import io.dataspray.runner.Runner;
import io.dataspray.runner.Coordinator;
import {{{definition.namespace}}}.{{{processor.nameCamelUpper}}}Impl;

public class {{{processor.nameCamelUpper}}}Runner implements Runner {

    private final {{{processor.nameCamelUpper}}} {{{processor.nameCamelLower}}} = new {{{processor.nameCamelUpper}}}Impl();
    {{#processor.jsonInputStreams.size}}
    private final Gson gson = new GsonBuilder()
        .setFieldNamingPolicy(FieldNamingPolicy.IDENTITY)
        .disableHtmlEscaping()
        .create();
    {{/processor.jsonInputStreams.size}}

    @Override
    void process(Message<byte[]> message, String sourceName, Coordinator Coordinator) {
        {{{processor.nameCamelUpper}}}Coordinator {{{processor.nameCamelLower}}}coordinator = new {{{processor.nameCamelLower}}}CoordinatorImpl(coordinator);
        switch(sourceName) {
            {{#processor.inputStreams}}
            {{#dataFormat.isSerdeBinary}}
            case "{{{dataFormat.name}}}":
                {{{processor.nameCamelLower}}}.process{{{uniqueNameCamelUpper}}}(message, {{{processor.nameCamelLower}}}coordinator);
                break;
            {{/dataFormat.isSerdeBinary}}
            {{^dataFormat.isSerdeBinary}}
            case "{{{dataFormat.name}}}":
                {{{processor.nameCamelLower}}}.process{{{uniqueNameCamelUpper}}}(message.swapData(to{{{dataFormat.nameCamelUpper}}}(message.getData())), {{{processor.nameCamelLower}}}coordinator);
                break;
            {{/dataFormat.isSerdeBinary}}
            {{/processor.inputStreams}}
            default:
                throw new RuntimeException("Received message from unexpected source: " + sourceName);
        }
    }
    {{#processor.inputStreams}}

    private {{{dataFormat.nameCamelUpper}}} to{{{dataFormat.nameCamelUpper}}}(byte[] data) {
        {{#isString}}
        return data.getBytes("UTF_8");
        {{/isString}}
        {{#isJson}}
        return gson.fromJson(msg, {{{nameCamelUpper}}}.class);
        {{/isJson}}
        {{#isProtobuf}}
        return {{{nameCamelUpper}}}.parseFrom(data);
        {{/isProtobuf}}
        {{#isAvro}}
        return {{{nameCamelUpper}}}.getDecoder().decode(data);
        {{/isAvro}}
        );
    }
    {{/processor.inputStreams}}
}
