# yaml-language-server: $schema=https://json-schema.org/draft-03/schema
$schema: https://json-schema.org/draft-07/schema
# CodeGen feature support: https://github.com/joelittlejohn/jsonschema2pojo/wiki/Reference
$id: https://dataspray.io/schema/dataspray.schema.json

title: DataSpray definition
description: DataSpray definition containing resources and configuration

type: object
required:
  - version
  - name
properties:
  version:
    description: Version of DataSpray definition
    enum:
      - v1.0.0
  name:
    description: Project name
    type: string

  dataFormats:
    type: array
    items:
      $ref: '#/$defs/dataFormat'

  kafkaStores:
    type: array
    items:
      $ref: '#/$defs/kafkaStore'

  javaProcessors:
    type: array
    items:
      $ref: '#/$defs/javaProcessor'

$defs:
  ###
  ## Common
  #
  item:
    type: object
    required:
      - name
    properties:
      name:
        type: string

  ###
  ## Formats
  #
  dataFormat:
    extends:
      $ref: '#/$defs/item'
    type: object
    required:
      - name
      - serde
    properties:
      name:
        type: string
      serde:
        enum:
          # TODO xml, thrift, capnp, flatbuffers, sbe, ...
          - binary
          - string
          - number
          - json
          - protobuf
          - avro

  ###
  ## Stores
  #
  store:
    extends:
      $ref: '#/$defs/item'
    type: object
  storeInput:
    extends:
      $ref: '#/$defs/item'
    type: object
  storeOutput:
    extends:
      $ref: '#/$defs/item'
    type: object
  storeState:
    extends:
      $ref: '#/$defs/item'
    type: object
  storeCheckpoint:
    extends:
      $ref: '#/$defs/item'
    type: object

  # Kafka
  kafkaStore:
    extends:
      $ref: '#/$defs/store'
    type: object
    required:
      - bootstrapServer
      - topics
    properties:
      bootstrapServers:
        # TODO authentication via: SASL, mTLS, HTTP Basic Auth
        description: A list of network endpoints where the Kafka brokers are running. This is given as a comma-separated list of hostname:port pairs. It's not necessary to list every single Kafka node in the cluster.
        examples: [ 'kafka1.example.com:9092,kafka2.example.com:9092,kafka3.example.com:9092' ]
        type: string
      topics:
        type: array
        items:
          type: object
          title: Topic
          required:
            - topicName
            - dataFormatName
          properties:
            topicName:
              type: string
            dataFormatName:
              type: string


  kafkaStoreInput:
    extends:
      $ref: '#/$defs/storeInput'
    type: object
    required:
      - topicName
    properties:
      topic:
        type: string
  kafkaStoreOutput:
    extends:
      $ref: '#/$defs/storeOutput'
    type: object
    required:
      - topicName
    properties:
      topic:
        type: string

  ###
  ## Processors
  #
  processor:
    extends:
      $ref: '#/$defs/item'
    type: object

  # Java
  javaProcessor:
    extends:
      $ref: '#/$defs/processor'
    type: object
    required:
      - dialect
    properties:
      dialect:
        enum: [ vanilla, samza ]
      inputs:
        type: array
        items:
          type: object
          required:
            - dataFormatName
          properties:
            name:
              type: string
            dataFormatName:
              type: string
      outputs:
        type: array
        items:
          type: object
          required:
            - dataFormatName
          properties:
            name:
              type: string
            dataFormatName:
              type: string

