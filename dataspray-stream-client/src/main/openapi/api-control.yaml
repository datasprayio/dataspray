openapi: 3.0.0
info:
  title: DataSpray Stream Control API
  description: ClearFlask API documentation.
  version: 1.0.0

servers:
  - url: https://control.dataspray.io

security:
  - DatasprayCognitoPool: [ ]

components:
  securitySchemes:
    DatasprayCognitoPool:
      type: apiKey
      in: header
      name: Authorization
  responses:
    Ok:
      description: >-
        HTTP 200 Ok
        Request was successful. No response value supplied.
  schemas:
    ApiKey:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
    ApiKeys:
      type: object
      required:
        - keys
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/ApiKey'
    ApiKeyWithSecret:
      allOf:
        - $ref: '#/components/schemas/ApiKey'
        - type: object
          required:
            - value
          properties:
            secret:
              type: string
    UploadCodeRequest:
      type: object
      required:
        - taskId
        - contentLengthBytes
      properties:
        taskId:
          type: string
        contentLengthBytes:
          type: integer
          format: int64
    UploadCodeResponse:
      type: object
      required:
        - presignedUrl
        - codeUrl
      properties:
        presignedUrl:
          type: string
        codeUrl:
          type: string
    DeployRequest:
      type: object
      required:
        - codeUrl
        - handler
        - inputQueueNames
        - switchToNow
      properties:
        codeUrl:
          type: string
        handler:
          type: string
        inputQueueNames:
          type: array
          items:
            type: string
        runtime:
          type: string
          # Subset of software.amazon.awssdk.services.lambda.model.Runtime
          enum:
            - JAVA8
            - JAVA11
            - NODEJS14_X
            - PYTHON3_9
            - GO1_X
            - RUBY2_7
        switchToNow:
          type: boolean
    TaskVersions:
      type: object
      required:
        - status
        - versions
      properties:
        status:
          $ref: '#/components/schemas/TaskStatus'
        versions:
          type: array
          items:
            $ref: '#/components/schemas/TaskVersion'
    TaskVersion:
      type: object
      required:
        - taskId
        - version
        - description
      properties:
        taskId:
          type: string
        version:
          type: string
        description:
          type: string
    TaskStatuses:
      type: object
      required:
        - tasks
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskStatus'
    TaskStatus:
      type: object
      required:
        - taskId
        - status
      properties:
        taskId:
          type: string
        version:
          type: string
        status:
          type: string
          enum:
            - CREATING
            - STARTING
            - UPDATING
            - RUNNING
            - PAUSING
            - PAUSED
            - NOTFOUND
        lastUpdateStatus:
          type: string
          # Matches software.amazon.awssdk.services.lambda.model.LastUpdateStatus
          enum:
            - SUCCESSFUL
            - FAILED
            - IN_PROGRESS
        lastUpdateStatusReason:
          type: string

paths:
  /v1/ping:
    get:
      operationId: ping
      tags: [ Ping ]
      responses:
        '200':
          $ref: '#/components/responses/Ok'

  /v1/apikeys:
    post:
      operationId: listApiKeys
      tags: [ Control ]
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeys'
  /v1/apikey:
    put:
      operationId: createApiKey
      tags: [ Control ]
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyWithSecret'
  /v1/apikey/{apiKeyId}:
    post:
      operationId: getApiKeySecret
      tags: [ Control ]
      parameters:
        - name: apiKeyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyWithSecret'
    delete:
      operationId: revokeApiKey
      tags: [ Control ]
      parameters:
        - name: apiKeyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok

  /v1/code/upload:
    put:
      operationId: uploadCode
      tags: [ Control ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadCodeRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadCodeResponse'

  /v1/control/status:
    get:
      operationId: statusAll
      tags: [ Control ]
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatuses'
  /v1/control/task/{taskId}/status/:
    get:
      operationId: status
      tags: [ Control ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
  /v1/control/task/{taskId}/deploy:
    patch:
      operationId: deployVersion
      tags: [ Control ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeployRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskVersion'
  /v1/control/task/{taskId}/versions:
    get:
      operationId: getVersions
      tags: [ Control ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskVersions'
  /v1/control/task/{taskId}/activate:
    patch:
      operationId: activateVersion
      tags: [ Control ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
  /v1/control/task/{taskId}/pause:
    delete:
      operationId: pause
      tags: [ Control ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
  /v1/control/task/{taskId}/resume:
    delete:
      operationId: resume
      tags: [ Control ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
  /v1/control/task/{taskId}/delete:
    delete:
      operationId: delete
      tags: [ Control ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
